//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebTest.BBSSearchService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Enums.CommentSortType", Namespace="http://schemas.datacontract.org/2004/07/SZHome.BBSSearch.Common")]
    public enum EnumsCommentSortType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        最新回复 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        最新发帖 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        精华帖 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        最多回复 = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BBSCommentEntity", Namespace="http://schemas.datacontract.org/2004/07/SZHome.Search.Entity")]
    [System.SerializableAttribute()]
    public partial class BBSCommentEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ArticleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdentityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PostTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReplyNumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ReplyTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ArticleId {
            get {
                return this.ArticleIdField;
            }
            set {
                if ((this.ArticleIdField.Equals(value) != true)) {
                    this.ArticleIdField = value;
                    this.RaisePropertyChanged("ArticleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Detail {
            get {
                return this.DetailField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailField, value) != true)) {
                    this.DetailField = value;
                    this.RaisePropertyChanged("Detail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Identity {
            get {
                return this.IdentityField;
            }
            set {
                if ((this.IdentityField.Equals(value) != true)) {
                    this.IdentityField = value;
                    this.RaisePropertyChanged("Identity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PostTime {
            get {
                return this.PostTimeField;
            }
            set {
                if ((this.PostTimeField.Equals(value) != true)) {
                    this.PostTimeField = value;
                    this.RaisePropertyChanged("PostTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReplyNum {
            get {
                return this.ReplyNumField;
            }
            set {
                if ((this.ReplyNumField.Equals(value) != true)) {
                    this.ReplyNumField = value;
                    this.RaisePropertyChanged("ReplyNum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ReplyTime {
            get {
                return this.ReplyTimeField;
            }
            set {
                if ((this.ReplyTimeField.Equals(value) != true)) {
                    this.ReplyTimeField = value;
                    this.RaisePropertyChanged("ReplyTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagIds {
            get {
                return this.TagIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagIdsField, value) != true)) {
                    this.TagIdsField = value;
                    this.RaisePropertyChanged("TagIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="BBSSearchService.BBS")]
    public interface BBS {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentDelete", ReplyAction="urn:BBS/CommentDeleteResponse")]
        bool CommentDelete(int commentId, int feedbackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentDelete", ReplyAction="urn:BBS/CommentDeleteResponse")]
        System.Threading.Tasks.Task<bool> CommentDeleteAsync(int commentId, int feedbackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentBatDelete", ReplyAction="urn:BBS/CommentBatDeleteResponse")]
        bool CommentBatDelete(System.Collections.Generic.KeyValuePair<int, int>[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentBatDelete", ReplyAction="urn:BBS/CommentBatDeleteResponse")]
        System.Threading.Tasks.Task<bool> CommentBatDeleteAsync(System.Collections.Generic.KeyValuePair<int, int>[] list);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/DeleteUserComment", ReplyAction="urn:BBS/DeleteUserCommentResponse")]
        bool DeleteUserComment(int userId, int identity, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/DeleteUserComment", ReplyAction="urn:BBS/DeleteUserCommentResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserCommentAsync(int userId, int identity, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/DeleteUserAllComment", ReplyAction="urn:BBS/DeleteUserAllCommentResponse")]
        bool DeleteUserAllComment(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/DeleteUserAllComment", ReplyAction="urn:BBS/DeleteUserAllCommentResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAllCommentAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentAdd", ReplyAction="urn:BBS/CommentAddResponse")]
        bool CommentAdd(int commentId, int userId, string userName, System.Nullable<int> projectId, string title, string detail, System.DateTime postTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentAdd", ReplyAction="urn:BBS/CommentAddResponse")]
        System.Threading.Tasks.Task<bool> CommentAddAsync(int commentId, int userId, string userName, System.Nullable<int> projectId, string title, string detail, System.DateTime postTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentReply", ReplyAction="urn:BBS/CommentReplyResponse")]
        bool CommentReply(int commentId, int feedbackId, int userId, string userName, string detail, int replyNum, System.DateTime postTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentReply", ReplyAction="urn:BBS/CommentReplyResponse")]
        System.Threading.Tasks.Task<bool> CommentReplyAsync(int commentId, int feedbackId, int userId, string userName, string detail, int replyNum, System.DateTime postTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentEdit", ReplyAction="urn:BBS/CommentEditResponse")]
        bool CommentEdit(int commentId, int feedbackId, string title, string detail);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentEdit", ReplyAction="urn:BBS/CommentEditResponse")]
        System.Threading.Tasks.Task<bool> CommentEditAsync(int commentId, int feedbackId, string title, string detail);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/UpdateSubjectType", ReplyAction="urn:BBS/UpdateSubjectTypeResponse")]
        bool UpdateSubjectType(int commentId, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/UpdateSubjectType", ReplyAction="urn:BBS/UpdateSubjectTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateSubjectTypeAsync(int commentId, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/AddCommentTag", ReplyAction="urn:BBS/AddCommentTagResponse")]
        bool AddCommentTag(int commentId, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/AddCommentTag", ReplyAction="urn:BBS/AddCommentTagResponse")]
        System.Threading.Tasks.Task<bool> AddCommentTagAsync(int commentId, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/AddCommentTagsId", ReplyAction="urn:BBS/AddCommentTagsIdResponse")]
        bool AddCommentTagsId(int commentId, int[] tagsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/AddCommentTagsId", ReplyAction="urn:BBS/AddCommentTagsIdResponse")]
        System.Threading.Tasks.Task<bool> AddCommentTagsIdAsync(int commentId, int[] tagsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/AddCommentTagIds", ReplyAction="urn:BBS/AddCommentTagIdsResponse")]
        bool AddCommentTagIds(int commentId, string tagIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/AddCommentTagIds", ReplyAction="urn:BBS/AddCommentTagIdsResponse")]
        System.Threading.Tasks.Task<bool> AddCommentTagIdsAsync(int commentId, string tagIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/DeleteCommentTag", ReplyAction="urn:BBS/DeleteCommentTagResponse")]
        bool DeleteCommentTag(int commentId, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/DeleteCommentTag", ReplyAction="urn:BBS/DeleteCommentTagResponse")]
        System.Threading.Tasks.Task<bool> DeleteCommentTagAsync(int commentId, int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/DeleteCommentAllTag", ReplyAction="urn:BBS/DeleteCommentAllTagResponse")]
        bool DeleteCommentAllTag(int commentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/DeleteCommentAllTag", ReplyAction="urn:BBS/DeleteCommentAllTagResponse")]
        System.Threading.Tasks.Task<bool> DeleteCommentAllTagAsync(int commentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentSearchWithTag", ReplyAction="urn:BBS/CommentSearchWithTagResponse")]
        WebTest.BBSSearchService.CommentSearchWithTagResponse CommentSearchWithTag(WebTest.BBSSearchService.CommentSearchWithTagRequest request);
        
        // CODEGEN: 正在生成消息协定，应为该操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentSearchWithTag", ReplyAction="urn:BBS/CommentSearchWithTagResponse")]
        System.Threading.Tasks.Task<WebTest.BBSSearchService.CommentSearchWithTagResponse> CommentSearchWithTagAsync(WebTest.BBSSearchService.CommentSearchWithTagRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentTitleSearchWithTagIds", ReplyAction="urn:BBS/CommentTitleSearchWithTagIdsResponse")]
        WebTest.BBSSearchService.CommentTitleSearchWithTagIdsResponse CommentTitleSearchWithTagIds(WebTest.BBSSearchService.CommentTitleSearchWithTagIdsRequest request);
        
        // CODEGEN: 正在生成消息协定，应为该操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="urn:BBS/CommentTitleSearchWithTagIds", ReplyAction="urn:BBS/CommentTitleSearchWithTagIdsResponse")]
        System.Threading.Tasks.Task<WebTest.BBSSearchService.CommentTitleSearchWithTagIdsResponse> CommentTitleSearchWithTagIdsAsync(WebTest.BBSSearchService.CommentTitleSearchWithTagIdsRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CommentSearchWithTag", WrapperNamespace="", IsWrapped=true)]
    public partial class CommentSearchWithTagRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public int[] tagIds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public System.Nullable<int> projectId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public int start;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public int size;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public WebTest.BBSSearchService.EnumsCommentSortType sortType;
        
        public CommentSearchWithTagRequest() {
        }
        
        public CommentSearchWithTagRequest(int[] tagIds, System.Nullable<int> projectId, int start, int size, WebTest.BBSSearchService.EnumsCommentSortType sortType) {
            this.tagIds = tagIds;
            this.projectId = projectId;
            this.start = start;
            this.size = size;
            this.sortType = sortType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CommentSearchWithTagResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class CommentSearchWithTagResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public WebTest.BBSSearchService.BBSCommentEntity[] CommentSearchWithTagResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public long count;
        
        public CommentSearchWithTagResponse() {
        }
        
        public CommentSearchWithTagResponse(WebTest.BBSSearchService.BBSCommentEntity[] CommentSearchWithTagResult, long count) {
            this.CommentSearchWithTagResult = CommentSearchWithTagResult;
            this.count = count;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CommentTitleSearchWithTagIds", WrapperNamespace="", IsWrapped=true)]
    public partial class CommentTitleSearchWithTagIdsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string title;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public int[] tagIds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=2)]
        public System.Nullable<int> projectId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=3)]
        public int start;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=4)]
        public int size;
        
        public CommentTitleSearchWithTagIdsRequest() {
        }
        
        public CommentTitleSearchWithTagIdsRequest(string title, int[] tagIds, System.Nullable<int> projectId, int start, int size) {
            this.title = title;
            this.tagIds = tagIds;
            this.projectId = projectId;
            this.start = start;
            this.size = size;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CommentTitleSearchWithTagIdsResponse", WrapperNamespace="", IsWrapped=true)]
    public partial class CommentTitleSearchWithTagIdsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public System.Collections.Generic.Dictionary<int, string> CommentTitleSearchWithTagIdsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public long count;
        
        public CommentTitleSearchWithTagIdsResponse() {
        }
        
        public CommentTitleSearchWithTagIdsResponse(System.Collections.Generic.Dictionary<int, string> CommentTitleSearchWithTagIdsResult, long count) {
            this.CommentTitleSearchWithTagIdsResult = CommentTitleSearchWithTagIdsResult;
            this.count = count;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BBSChannel : WebTest.BBSSearchService.BBS, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BBSClient : System.ServiceModel.ClientBase<WebTest.BBSSearchService.BBS>, WebTest.BBSSearchService.BBS {
        
        public BBSClient() {
        }
        
        public BBSClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BBSClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BBSClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BBSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CommentDelete(int commentId, int feedbackId) {
            return base.Channel.CommentDelete(commentId, feedbackId);
        }
        
        public System.Threading.Tasks.Task<bool> CommentDeleteAsync(int commentId, int feedbackId) {
            return base.Channel.CommentDeleteAsync(commentId, feedbackId);
        }
        
        public bool CommentBatDelete(System.Collections.Generic.KeyValuePair<int, int>[] list) {
            return base.Channel.CommentBatDelete(list);
        }
        
        public System.Threading.Tasks.Task<bool> CommentBatDeleteAsync(System.Collections.Generic.KeyValuePair<int, int>[] list) {
            return base.Channel.CommentBatDeleteAsync(list);
        }
        
        public bool DeleteUserComment(int userId, int identity, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.DeleteUserComment(userId, identity, startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserCommentAsync(int userId, int identity, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.DeleteUserCommentAsync(userId, identity, startDate, endDate);
        }
        
        public bool DeleteUserAllComment(int userId) {
            return base.Channel.DeleteUserAllComment(userId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAllCommentAsync(int userId) {
            return base.Channel.DeleteUserAllCommentAsync(userId);
        }
        
        public bool CommentAdd(int commentId, int userId, string userName, System.Nullable<int> projectId, string title, string detail, System.DateTime postTime) {
            return base.Channel.CommentAdd(commentId, userId, userName, projectId, title, detail, postTime);
        }
        
        public System.Threading.Tasks.Task<bool> CommentAddAsync(int commentId, int userId, string userName, System.Nullable<int> projectId, string title, string detail, System.DateTime postTime) {
            return base.Channel.CommentAddAsync(commentId, userId, userName, projectId, title, detail, postTime);
        }
        
        public bool CommentReply(int commentId, int feedbackId, int userId, string userName, string detail, int replyNum, System.DateTime postTime) {
            return base.Channel.CommentReply(commentId, feedbackId, userId, userName, detail, replyNum, postTime);
        }
        
        public System.Threading.Tasks.Task<bool> CommentReplyAsync(int commentId, int feedbackId, int userId, string userName, string detail, int replyNum, System.DateTime postTime) {
            return base.Channel.CommentReplyAsync(commentId, feedbackId, userId, userName, detail, replyNum, postTime);
        }
        
        public bool CommentEdit(int commentId, int feedbackId, string title, string detail) {
            return base.Channel.CommentEdit(commentId, feedbackId, title, detail);
        }
        
        public System.Threading.Tasks.Task<bool> CommentEditAsync(int commentId, int feedbackId, string title, string detail) {
            return base.Channel.CommentEditAsync(commentId, feedbackId, title, detail);
        }
        
        public bool UpdateSubjectType(int commentId, int type) {
            return base.Channel.UpdateSubjectType(commentId, type);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSubjectTypeAsync(int commentId, int type) {
            return base.Channel.UpdateSubjectTypeAsync(commentId, type);
        }
        
        public bool AddCommentTag(int commentId, int tagId) {
            return base.Channel.AddCommentTag(commentId, tagId);
        }
        
        public System.Threading.Tasks.Task<bool> AddCommentTagAsync(int commentId, int tagId) {
            return base.Channel.AddCommentTagAsync(commentId, tagId);
        }
        
        public bool AddCommentTagsId(int commentId, int[] tagsId) {
            return base.Channel.AddCommentTagsId(commentId, tagsId);
        }
        
        public System.Threading.Tasks.Task<bool> AddCommentTagsIdAsync(int commentId, int[] tagsId) {
            return base.Channel.AddCommentTagsIdAsync(commentId, tagsId);
        }
        
        public bool AddCommentTagIds(int commentId, string tagIds) {
            return base.Channel.AddCommentTagIds(commentId, tagIds);
        }
        
        public System.Threading.Tasks.Task<bool> AddCommentTagIdsAsync(int commentId, string tagIds) {
            return base.Channel.AddCommentTagIdsAsync(commentId, tagIds);
        }
        
        public bool DeleteCommentTag(int commentId, int tagId) {
            return base.Channel.DeleteCommentTag(commentId, tagId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCommentTagAsync(int commentId, int tagId) {
            return base.Channel.DeleteCommentTagAsync(commentId, tagId);
        }
        
        public bool DeleteCommentAllTag(int commentId) {
            return base.Channel.DeleteCommentAllTag(commentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCommentAllTagAsync(int commentId) {
            return base.Channel.DeleteCommentAllTagAsync(commentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebTest.BBSSearchService.CommentSearchWithTagResponse WebTest.BBSSearchService.BBS.CommentSearchWithTag(WebTest.BBSSearchService.CommentSearchWithTagRequest request) {
            return base.Channel.CommentSearchWithTag(request);
        }
        
        public WebTest.BBSSearchService.BBSCommentEntity[] CommentSearchWithTag(int[] tagIds, System.Nullable<int> projectId, int start, int size, WebTest.BBSSearchService.EnumsCommentSortType sortType, out long count) {
            WebTest.BBSSearchService.CommentSearchWithTagRequest inValue = new WebTest.BBSSearchService.CommentSearchWithTagRequest();
            inValue.tagIds = tagIds;
            inValue.projectId = projectId;
            inValue.start = start;
            inValue.size = size;
            inValue.sortType = sortType;
            WebTest.BBSSearchService.CommentSearchWithTagResponse retVal = ((WebTest.BBSSearchService.BBS)(this)).CommentSearchWithTag(inValue);
            count = retVal.count;
            return retVal.CommentSearchWithTagResult;
        }
        
        public System.Threading.Tasks.Task<WebTest.BBSSearchService.CommentSearchWithTagResponse> CommentSearchWithTagAsync(WebTest.BBSSearchService.CommentSearchWithTagRequest request) {
            return base.Channel.CommentSearchWithTagAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebTest.BBSSearchService.CommentTitleSearchWithTagIdsResponse WebTest.BBSSearchService.BBS.CommentTitleSearchWithTagIds(WebTest.BBSSearchService.CommentTitleSearchWithTagIdsRequest request) {
            return base.Channel.CommentTitleSearchWithTagIds(request);
        }
        
        public System.Collections.Generic.Dictionary<int, string> CommentTitleSearchWithTagIds(string title, int[] tagIds, System.Nullable<int> projectId, int start, int size, out long count) {
            WebTest.BBSSearchService.CommentTitleSearchWithTagIdsRequest inValue = new WebTest.BBSSearchService.CommentTitleSearchWithTagIdsRequest();
            inValue.title = title;
            inValue.tagIds = tagIds;
            inValue.projectId = projectId;
            inValue.start = start;
            inValue.size = size;
            WebTest.BBSSearchService.CommentTitleSearchWithTagIdsResponse retVal = ((WebTest.BBSSearchService.BBS)(this)).CommentTitleSearchWithTagIds(inValue);
            count = retVal.count;
            return retVal.CommentTitleSearchWithTagIdsResult;
        }
        
        public System.Threading.Tasks.Task<WebTest.BBSSearchService.CommentTitleSearchWithTagIdsResponse> CommentTitleSearchWithTagIdsAsync(WebTest.BBSSearchService.CommentTitleSearchWithTagIdsRequest request) {
            return base.Channel.CommentTitleSearchWithTagIdsAsync(request);
        }
    }
}
